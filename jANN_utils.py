'''
    jANN_utils.py - tility functions for my neural net for
    printing and visualizing the network
'''
from ann import Net
import networkx as nx
import matplotlib.pyplot as plt

def printTestCase(myNet, a):
    '''
    Prints the inputs and the outputs generated by the network
    :param myNet:  jANN Net class
    :param a: array of input values
    '''
    inputVals = [a[0]]
    results = myNet.test([float(a[0]), float(a[1])])
    print a
    print results

def drawEdges(myNet):
    '''
    Draws a plot of the network state of myNet including connections and its weights.
    Net will be drawn with the input layer on the bottom, and output layer on top
    :param myNet: jANN Net class
    '''
    G = nx.Graph()

    #construct the graph
    for layerNum in xrange(0, len(myNet._layers)-1):
        for neuronNum in xrange(0, len(myNet._layers[layerNum])):
            label0 = "%d, %d" % (layerNum, neuronNum)
            G.add_node(label0, pos=(neuronNum, layerNum))
            for connectionNum in xrange(0, len(myNet._layers[layerNum][neuronNum]._outputWeights)):
                label1 = "%d, %d" % (layerNum+1, connectionNum)

                #specify the node position on the plot
                G.add_node(label1, pos=(connectionNum, layerNum+1))

                #specify the weight
                G.add_edge(label0, label1, weight = myNet._layers[layerNum][neuronNum]._outputWeights[connectionNum].weight)

    pos = nx.get_node_attributes(G,'pos')
    edge_weight=dict([((u,v,),float(d['weight'])) for u,v,d in G.edges(data=True)])
    nx.draw_networkx_edge_labels(G,pos,edge_labels=edge_weight)
    nx.draw_networkx_nodes(G,pos)
    nx.draw_networkx_edges(G,pos)
    nx.draw_networkx_labels(G,pos)
    plt.axis('off')
    plt.show()
